# generated by datamodel-codegen:
#   filename:  lend.earn.yaml

from __future__ import annotations

from typing import List

from pydantic import AnyUrl, BaseModel, ConfigDict, RootModel


class EarnAmountRequestBody(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    asset: str
    signer: str
    amount: str


class EarnSharesRequestBody(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    asset: str
    signer: str
    shares: str


class TransactionResponse(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    transaction: str


class AccountMeta(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    pubkey: str
    isSigner: bool
    isWritable: bool


class UserEarningsResponse(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    address: str
    ownerAddress: str
    totalDeposits: str
    totalWithdraws: str
    totalBalance: str
    totalAssets: str
    earnings: str


class AssetInfo(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    address: str
    chain_id: str
    name: str
    symbol: str
    decimals: int
    logo_url: AnyUrl
    price: str
    coingecko_id: str


class LiquiditySupplyData(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    modeWithInterest: bool
    supply: str
    withdrawalLimit: str
    lastUpdateTimestamp: str
    expandPercent: str
    expandDuration: str
    baseWithdrawalLimit: str
    withdrawableUntilLimit: str
    withdrawable: str


class EarnPositionsGetParametersQuery(BaseModel):
    users: str


class EarnEarningsGetParametersQuery(BaseModel):
    user: str
    positions: str


class InstructionResponse(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    programId: str
    accounts: List[AccountMeta]
    data: str


class TokenInfo(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: int
    address: str
    name: str
    symbol: str
    decimals: int
    assetAddress: str
    asset: AssetInfo
    totalAssets: str
    totalSupply: str
    convertToShares: str
    convertToAssets: str
    rewardsRate: str
    supplyRate: str
    totalRate: str
    rebalanceDifference: str
    liquiditySupplyData: LiquiditySupplyData


class TokensResponse(RootModel[List[TokenInfo]]):
    root: List[TokenInfo]


class UserPosition(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    token: TokenInfo
    ownerAddress: str
    shares: str
    underlyingAssets: str
    underlyingBalance: str
    allowance: str


class UserPositionsResponse(RootModel[List[UserPosition]]):
    root: List[UserPosition]
