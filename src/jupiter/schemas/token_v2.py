# generated by datamodel-codegen:
#   filename:  token.v2.yaml

from __future__ import annotations

from enum import Enum
from typing import List, Optional

from pydantic import AwareDatetime, BaseModel, ConfigDict, RootModel, conint


class FirstPool(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: Optional[str] = None
    createdAt: Optional[str] = None


class Audit(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    isSus: Optional[bool] = None
    mintAuthorityDisabled: Optional[bool] = None
    freezeAuthorityDisabled: Optional[bool] = None
    topHoldersPercentage: Optional[float] = None
    devBalancePercentage: Optional[float] = None
    devMigrations: Optional[float] = None


class OrganicScoreLabel(Enum):
    high = 'high'
    medium = 'medium'
    low = 'low'


class SwapStats(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    priceChange: Optional[float] = None
    holderChange: Optional[float] = None
    liquidityChange: Optional[float] = None
    volumeChange: Optional[float] = None
    buyVolume: Optional[float] = None
    sellVolume: Optional[float] = None
    buyOrganicVolume: Optional[float] = None
    sellOrganicVolume: Optional[float] = None
    numBuys: Optional[float] = None
    numSells: Optional[float] = None
    numTraders: Optional[float] = None
    numOrganicBuyers: Optional[float] = None
    numNetBuyers: Optional[float] = None


class SearchGetParametersQuery(BaseModel):
    query: str


class SearchGetResponse1(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    error: str


class Query(Enum):
    lst = 'lst'
    verified = 'verified'


class TagGetParametersQuery(BaseModel):
    query: Query


class TagGetResponse1(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    error: str


class FieldCategoryIntervalGetParametersQuery(BaseModel):
    limit: Optional[conint(ge=1, le=100)] = None


class FieldCategoryIntervalGetResponse1(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    error: str


class RecentGetResponse1(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    error: str


class MintInformation(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: Optional[str] = None
    """
    The token's mint address
    """
    name: Optional[str] = None
    symbol: Optional[str] = None
    icon: Optional[str] = None
    decimals: Optional[float] = None
    twitter: Optional[str] = None
    telegram: Optional[str] = None
    website: Optional[str] = None
    dev: Optional[str] = None
    """
    The token's developer address
    """
    circSupply: Optional[float] = None
    totalSupply: Optional[float] = None
    tokenProgram: Optional[str] = None
    """
    The token program address
    """
    launchpad: Optional[str] = None
    partnerConfig: Optional[str] = None
    graduatedPool: Optional[str] = None
    graduatedAt: Optional[str] = None
    holderCount: Optional[float] = None
    fdv: Optional[float] = None
    mcap: Optional[float] = None
    usdPrice: Optional[float] = None
    priceBlockId: Optional[float] = None
    liquidity: Optional[float] = None
    stats5m: Optional[SwapStats] = None
    stats1h: Optional[SwapStats] = None
    stats6h: Optional[SwapStats] = None
    stats24h: Optional[SwapStats] = None
    firstPool: Optional[FirstPool] = None
    audit: Optional[Audit] = None
    organicScore: Optional[float] = None
    organicScoreLabel: Optional[OrganicScoreLabel] = None
    isVerified: Optional[bool] = None
    cexes: Optional[List[str]] = None
    tags: Optional[List[str]] = None
    updatedAt: Optional[AwareDatetime] = None


class SearchGetResponse(RootModel[List[MintInformation]]):
    root: List[MintInformation]


class TagGetResponse(RootModel[List[MintInformation]]):
    root: List[MintInformation]


class FieldCategoryIntervalGetResponse(RootModel[List[MintInformation]]):
    root: List[MintInformation]


class RecentGetResponse(RootModel[List[MintInformation]]):
    root: List[MintInformation]
