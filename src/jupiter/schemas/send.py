# generated by datamodel-codegen:
#   filename:  send.yaml

from __future__ import annotations

from typing import List, Optional

from pydantic import BaseModel, ConfigDict, conint


class Invite(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    invite_signer: str
    invite_pda: str
    sender: str
    expiry: str
    amount: str
    creation_tx: str
    deletion_tx: str
    receiver: str
    action: str
    creation_time: str
    deletion_time: str
    mint: str
    confirmed: int


class InviteDataResponse(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    invites: List[Invite]
    hasMoreData: bool


class CraftSendPostRequest(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    inviteSigner: str
    """
    - Public key address generated from the hash of the invite code
    - Do note that, the invite code requires to be generated client side, [refer to docs](/docs/send-api)
    - Please handle invite code and secret key with highest security as user funds are involved

    """
    sender: str
    """
    - Public key address of the sender
    - This address will be funding the amount to be sent and the token accounts involved

    """
    amount: str
    """
    - Amount in atomic value (before decimals)
    - E.g. to send 1 USDC is equivalent of `amount='1000000'`
    - Do note that there will be additional SOL amount being used in the transaction for transaction fees and token accounts

    """
    mint: Optional[str] = None
    """
    - Defaults to WSOL mint
    - Only pass in this parameter with other mint when required

    """


class CraftSendPostResponse(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    tx: str
    """
    - Base64-encoded unsigned Send transaction

    """
    expiry: str
    """
    - Unix timestamp of when the invite will expire
    - Expired invites will automatically clawback to sender

    """
    totalFeeLamports: str
    """
    - Amount of fees required for network's transaction fee and token accounts

    """


class CraftSendPostResponse1(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    error: str


class CraftClawbackPostRequest(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    invitePDA: str
    """
    - Program Derived Address derived by `"invite"` and the public key of the invite
    - Do note that, the invitePDA requires to be generated client side, [refer to docs](/docs/send-api)
    - Please handle invite code and secret key with highest security as user funds are involved

    """
    sender: str
    """
    - Public key address of the sender
    - Since this address funded the invite, it will be the receiving address of the full amount

    """


class CraftClawbackPostResponse(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    tx: str
    """
    - Base64-encoded unsigned Send transaction

    """


class CraftClawbackPostResponse1(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    error: str


class PendingInvitesGetParametersQuery(BaseModel):
    address: str
    page: Optional[conint(ge=1)] = 1


class PendingInvitesGetResponse(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    error: str


class InviteHistoryGetParametersQuery(BaseModel):
    address: str
    page: Optional[conint(ge=1)] = 1


class InviteHistoryGetResponse(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    error: str
