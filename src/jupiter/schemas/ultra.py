# generated by datamodel-codegen:
#   filename:  ultra.yaml

from __future__ import annotations

from enum import Enum
from typing import Dict, List, Literal, Optional

from pydantic import AwareDatetime, BaseModel, ConfigDict, RootModel, confloat


class FirstPool(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: Optional[str] = None
    createdAt: Optional[str] = None


class Audit(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    isSus: Optional[bool] = None
    mintAuthorityDisabled: Optional[bool] = None
    freezeAuthorityDisabled: Optional[bool] = None
    topHoldersPercentage: Optional[float] = None
    devBalancePercentage: Optional[float] = None
    devMigrations: Optional[float] = None


class OrganicScoreLabel(Enum):
    high = 'high'
    medium = 'medium'
    low = 'low'


class SwapStats(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    priceChange: Optional[float] = None
    holderChange: Optional[float] = None
    liquidityChange: Optional[float] = None
    volumeChange: Optional[float] = None
    buyVolume: Optional[float] = None
    sellVolume: Optional[float] = None
    buyOrganicVolume: Optional[float] = None
    sellOrganicVolume: Optional[float] = None
    numBuys: Optional[float] = None
    numSells: Optional[float] = None
    numTraders: Optional[float] = None
    numOrganicBuyers: Optional[float] = None
    numNetBuyers: Optional[float] = None


class NativeHoldingsResponse(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    amount: str
    """
    Total SOL in lamports
    """
    uiAmount: float
    """
    Total SOL in UI units after applying decimals
    """
    uiAmountString: str
    """
    Total SOL as string in UI units after applying decimals
    """


class TokenAccount(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    account: str
    """
    The token account address
    """
    amount: str
    """
    Token amount in atomic/raw units
    """
    uiAmount: float
    """
    Token amount in UI units after applying decimals
    """
    uiAmountString: str
    """
    Token amount as string in UI units after applying decimals
    """
    isFrozen: bool
    """
    Whether the token account is frozen
    """
    isAssociatedTokenAccount: bool
    """
    Whether this is an associated token account
    """
    decimals: float
    """
    Number of decimal places for the token
    """
    programId: str
    """
    The token program ID
    """


class ExcludeRouters(Enum):
    metis = 'metis'
    jupiterz = 'jupiterz'
    dflow = 'dflow'
    okx = 'okx'


class OrderGetParametersQuery(BaseModel):
    inputMint: str
    outputMint: str
    amount: str
    taker: Optional[str] = None
    referralAccount: Optional[str] = None
    referralFee: Optional[confloat(ge=50.0, le=255.0)] = None
    excludeRouters: Optional[ExcludeRouters] = None
    excludeDexes: Optional[str] = None


class SwapInfo(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    ammKey: str
    label: str
    inputMint: str
    outputMint: str
    inAmount: str
    outAmount: str
    feeAmount: str
    feeMint: str


class RoutePlanItem(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    swapInfo: SwapInfo
    percent: float
    bps: float


class Router(Enum):
    aggregator = 'aggregator'
    metis = 'metis'
    jupiterz = 'jupiterz'
    dflow = 'dflow'
    okx = 'okx'


class PlatformFee(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    amount: str
    feeBps: float


class OrderGetResponse(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    mode: str
    """
    - Either 'manual' or 'ultra', defaults to `ultra`
    - Defaults to `ultra`, unless manual parameters are defined which is not the intended use of the API

    """
    inputMint: str
    outputMint: str
    inAmount: str
    outAmount: str
    otherAmountThreshold: str
    swapMode: str
    slippageBps: float
    inUsdValue: Optional[float] = None
    outUsdValue: Optional[float] = None
    priceImpact: Optional[float] = None
    swapUsdValue: Optional[float] = None
    priceImpactPct: str
    """
    - Please use `priceImpact` field instead, this is still available only for backwards compatibility

    """
    routePlan: List[RoutePlanItem]
    feeMint: Optional[str] = None
    feeBps: float
    signatureFeeLamports: float
    """
    - The number of lamports the taker has to pay as a base network fee, if a valid transaction is returned. This may be 0 if the transaction is gasless, in which case the gas payer will cover this fee.

    """
    prioritizationFeeLamports: float
    """
    - The number of lamports the taker has to pay for higher priority landing, if a valid transaction is returned. Includes priority fees and tips for services such as Jito, if any. This may be 0 if the transaction is gasless, in which case the gas payer will cover this fee.

    """
    rentFeeLamports: float
    """
    - The number of lamports the taker has to pay for rent, if a valid transaction is returned. This may be 0 if the transaction is gasless, in which case the gas payer will cover this fee. Note that this value is just an estimate.

    """
    swapType: str
    """
    - Deprecated, in favour of router

    """
    router: Router
    transaction: Optional[str] = None
    """
    - Unsigned base-64 encoded transaction to be signed and used in `/execute`
    - If `taker` is null, this field will be null. Else, it will either be a valid base64 encoded transaction or the empty string

    """
    gasless: bool
    requestId: str
    """
    - Required to make a request to `/execute`

    """
    totalTime: float
    taker: Optional[str] = None
    quoteId: Optional[str] = None
    maker: Optional[str] = None
    expireAt: Optional[str] = None
    platformFee: Optional[PlatformFee] = None
    errorCode: Optional[float] = None
    """
    - This field will be present if `taker` is defined and `transaction` is the empty string
    - It is unique for each error scenarios

    """
    errorMessage: Optional[str] = None
    """
    - This field will be present if `taker` is defined and `transaction` is the empty string
    - This field can still return despite having a valid order/quote
    - This is meant for display purposes only and it is discouraged to match these error messages as they could be parameterized

    """


class OrderGetResponse1(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    error: str


class ExecutePostRequest(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    signedTransaction: str
    """
    - The signed transaction to execute

    """
    requestId: str
    """
    - Found in response of `/order`

    """


class Status(Enum):
    Success = 'Success'
    Failed = 'Failed'


class SwapEvent(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    inputMint: str
    inputAmount: str
    outputMint: str
    outputAmount: str


class ExecutePostResponse(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    status: Status
    signature: Optional[str] = None
    slot: Optional[str] = None
    error: Optional[str] = None
    code: float
    totalInputAmount: Optional[str] = None
    totalOutputAmount: Optional[str] = None
    inputAmountResult: Optional[str] = None
    outputAmountResult: Optional[str] = None
    swapEvents: Optional[List[SwapEvent]] = None


class ExecutePostResponse1(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    error: str
    code: float


class BalancesAddressGetResponse1(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    amount: str
    uiAmount: float
    slot: float
    isFrozen: bool


class BalancesAddressGetResponse(
    RootModel[Optional[Dict[str, BalancesAddressGetResponse1]]]
):
    root: Optional[Dict[str, BalancesAddressGetResponse1]] = None


class BalancesAddressGetResponse2(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    error: str


class ShieldGetParametersQuery(BaseModel):
    mints: str


class Type(Enum):
    NOT_VERIFIED = 'NOT_VERIFIED'
    LOW_LIQUIDITY = 'LOW_LIQUIDITY'
    NOT_SELLABLE = 'NOT_SELLABLE'
    LOW_ORGANIC_ACTIVITY = 'LOW_ORGANIC_ACTIVITY'
    HAS_MINT_AUTHORITY = 'HAS_MINT_AUTHORITY'
    HAS_FREEZE_AUTHORITY = 'HAS_FREEZE_AUTHORITY'
    HAS_PERMANENT_DELEGATE = 'HAS_PERMANENT_DELEGATE'
    NEW_LISTING = 'NEW_LISTING'
    VERY_LOW_TRADING_ACTIVITY = 'VERY_LOW_TRADING_ACTIVITY'
    HIGH_SUPPLY_CONCENTRATION = 'HIGH_SUPPLY_CONCENTRATION'
    NON_TRANSFERABLE = 'NON_TRANSFERABLE'
    MUTABLE_TRANSFER_FEES = 'MUTABLE_TRANSFER_FEES'
    SUSPICIOUS_DEV_ACTIVITY = 'SUSPICIOUS_DEV_ACTIVITY'
    SUSPICIOUS_TOP_HOLDER_ACTIVITY = 'SUSPICIOUS_TOP_HOLDER_ACTIVITY'
    HIGH_SINGLE_OWNERSHIP = 'HIGH_SINGLE_OWNERSHIP'
    field____TRANSFER_FEES = '{}%_TRANSFER_FEES'


class Severity(Enum):
    info = 'info'
    warning = 'warning'
    critical = 'critical'


class Warning(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    type: Optional[Type] = None
    """
    - Type of warning for the token

    """
    message: Optional[str] = None
    """
    - Human-readable warning message

    """
    severity: Optional[Severity] = None
    """
    - Severity level of the warning

    """
    source: Optional[Literal['RugCheck']] = None
    """
    - Optional external source of the warning

    """


class ShieldGetResponse(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    warnings: Dict[str, List[Warning]]


class ShieldGetResponse1(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    error: str


class Name(Enum):
    Metis_v1_6 = 'Metis v1.6'
    JupiterZ = 'JupiterZ'
    DFlow = 'DFlow'
    OKX_DEX_Router = 'OKX DEX Router'


class OrderRoutersGetResponseItem(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: str
    name: Name
    icon: Optional[str] = None


class OrderRoutersGetResponse(RootModel[List[OrderRoutersGetResponseItem]]):
    root: List[OrderRoutersGetResponseItem]


class SearchGetParametersQuery(BaseModel):
    query: str


class SearchGetResponse1(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    error: str


class MintInformation(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: Optional[str] = None
    """
    The token's mint address
    """
    name: Optional[str] = None
    symbol: Optional[str] = None
    icon: Optional[str] = None
    decimals: Optional[float] = None
    twitter: Optional[str] = None
    telegram: Optional[str] = None
    website: Optional[str] = None
    dev: Optional[str] = None
    """
    The token's developer address
    """
    circSupply: Optional[float] = None
    totalSupply: Optional[float] = None
    tokenProgram: Optional[str] = None
    """
    The token program address
    """
    launchpad: Optional[str] = None
    partnerConfig: Optional[str] = None
    graduatedPool: Optional[str] = None
    graduatedAt: Optional[str] = None
    holderCount: Optional[float] = None
    fdv: Optional[float] = None
    mcap: Optional[float] = None
    usdPrice: Optional[float] = None
    priceBlockId: Optional[float] = None
    liquidity: Optional[float] = None
    stats5m: Optional[SwapStats] = None
    stats1h: Optional[SwapStats] = None
    stats6h: Optional[SwapStats] = None
    stats24h: Optional[SwapStats] = None
    firstPool: Optional[FirstPool] = None
    audit: Optional[Audit] = None
    organicScore: Optional[float] = None
    organicScoreLabel: Optional[OrganicScoreLabel] = None
    isVerified: Optional[bool] = None
    cexes: Optional[List[str]] = None
    tags: Optional[List[str]] = None
    updatedAt: Optional[AwareDatetime] = None


class HoldingsResponse(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    amount: str
    """
    Total SOL in lamports
    """
    uiAmount: float
    """
    Total SOL in UI units after applying decimals
    """
    uiAmountString: str
    """
    Total SOL as string in UI units after applying decimals
    """
    tokens: Dict[str, List[TokenAccount]]
    """
    Other token holdings organized by mint address as keys
    """


class SearchGetResponse(RootModel[List[MintInformation]]):
    root: List[MintInformation]
