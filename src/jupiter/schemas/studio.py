# generated by datamodel-codegen:
#   filename:  studio.yaml

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import AnyUrl, BaseModel, ConfigDict, Field, confloat, constr


class TokenQuoteDecimal(Enum):
    number_6 = 6
    number_9 = 9


class NumberOfVestingPeriod(Enum):
    number_0 = 0
    number_6 = 6
    number_12 = 12
    number_183 = 183
    number_365 = 365


class TotalVestingDuration(Enum):
    number_0 = 0
    number_15552000 = 15552000
    number_15811200 = 15811200
    number_31536000 = 31536000


class CliffDurationFromMigrationTime(Enum):
    number_0 = 0
    number_15552000 = 15552000
    number_15811200 = 15811200
    number_31536000 = 31536000


class LockedVestingParam(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    totalLockedVestingAmount: float
    """
    - Total locked vesting amount of tokens (0% to 80% of total supply)

    """
    cliffUnlockAmount: float
    """
    - Amount of tokens unlocked at cliff

    """
    numberOfVestingPeriod: NumberOfVestingPeriod
    """
    - Number of vesting periods in days (183/365) or months (6/12)

    """
    totalVestingDuration: TotalVestingDuration
    """
    - Total vesting duration in seconds

    """
    cliffDurationFromMigrationTime: CliffDurationFromMigrationTime
    """
    - Cliff duration from migration time in seconds

    """


class BuildCurveByMarketCapParam(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    quoteMint: str = Field(
        ..., examples=['EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v']
    )
    """
    - Quote mint address
    - Either USDC, SOL, or JUP

    """
    initialMarketCap: float = Field(..., examples=[16000])
    """
    - Initial market cap in quote token units
    - 16000 passed in = 16000 USDC/SOL/JUP initial market cap

    """
    migrationMarketCap: float = Field(..., examples=[69000])
    """
    - Migration market cap in quote token units
    - 69000 passed in = 69000 USDC/SOL/JUP migration market cap

    """
    tokenQuoteDecimal: TokenQuoteDecimal
    """
    - Token quote decimal places

    """
    lockedVestingParam: LockedVestingParam


class TotalDuration(Enum):
    number_60 = 60
    number_120 = 120
    number_180 = 180
    number_240 = 240
    number_300 = 300


class BaseFeeMode(Enum):
    linear = 'linear'
    exponential = 'exponential'


class FeeBps(Enum):
    number_100 = 100
    number_200 = 200


class Fee(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    totalDuration: Optional[TotalDuration] = None
    """
    Total duration for fee schedule
    """
    baseFeeMode: Optional[BaseFeeMode] = None
    """
    Base fee mode for fee scheduler
    """
    feeBps: FeeBps
    """
    Ending fee in basis points (100 or 200)
    """


class TokenImageContentType(Enum):
    image_jpeg = 'image/jpeg'
    image_png = 'image/png'
    image_gif = 'image/gif'
    image_webp = 'image/webp'


class CreateDBCTransactionRequestBody(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    buildCurveByMarketCapParam: BuildCurveByMarketCapParam
    antiSniping: bool
    """
    - Enable anti-sniping protection
    - Apply an additional swap fee immediately after launch to discourage bots
    - Starts at 99% and decreases 1% linearly over a randomized period

    """
    fee: Fee
    """
    - Fee configuration parameters
    - If not provided, the default fee will be 100 basis points (1%)

    """
    isLpLocked: Optional[bool] = True
    """
    - Whether LP tokens should be locked
    - If enabled, 50% of graduated LP unlocks after 1 year
    - Useful for creators to strategize in the long term

    """
    tokenName: constr(min_length=1)
    tokenSymbol: constr(min_length=1)
    tokenImageContentType: TokenImageContentType
    """
    - Token image content type

    """
    creator: str
    """
    - Creator wallet public key

    """


class CreateDBCTransactionResponse(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    transaction: str
    """
    Base64-encoded transaction ready for signing
    """
    mint: str
    """
    Generated token mint address
    """
    imagePresignedUrl: AnyUrl
    """
    - Presigned URL for image upload via `PUT` request
    - This is for you to make a PUT request to upload your token image to the on-chain uri metadata
    - [Refer to the Token Metadata section for better understanding](/docs/studio-api/create-token#token-metadata)

    """
    metadataPresignedUrl: AnyUrl
    """
    - Presigned URL for metadata upload via `PUT` request
    - This is for you to make a PUT request to upload your token metadata to the on-chain uri metadata
    - [Refer to the Token Metadata section for better understanding](/docs/studio-api/create-token#token-metadata)

    """
    imageUrl: AnyUrl
    """
    Final image URL
    """


class SubmitDBCTransactionRequestBody(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    transaction: str
    """
    - Base64-encoded signed transaction

    """
    owner: str
    """
    - Owner wallet public key

    """
    content: Optional[str] = None
    """
    - Optional content description displayed on Studio dedicated token page
    - This is stored off-chain for our frontend to display
    - This is NOT the on-chain token metadata
    - The on-chain token metadata is done by making a PUT request to the presigned URL

    """
    headerImage: Optional[bytes] = None
    """
    - Optional header image file displayed on Studio token page
    - This is stored off-chain for our frontend to display
    - This is NOT the on-chain token metadata
    - The on-chain token metadata is done by making a PUT request to the presigned URL

    """


class CreateClaimFeeDBCTransactionRequestBody(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    ownerWallet: str
    """
    - Owner wallet public key

    """
    poolAddress: str
    """
    - Dynamic Bonding Curve pool address

    """
    maxQuoteAmount: confloat(ge=0.0)
    """
    - Maximum quote amount to claim

    """


class DbcPoolCreateTxPostResponse(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    errors: Optional[Dict[str, Any]] = None
    error: Optional[str] = None


class DbcPoolCreateTxPostResponse1(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    error: Optional[str] = None
    details: Optional[str] = None


class Data(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    mint: Optional[str] = None
    configKey: Optional[str] = None


class DbcPoolSubmitPostResponse(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    success: Optional[bool] = None
    data: Optional[Data] = None


class DbcPoolSubmitPostResponse1(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    errors: Optional[Dict[str, Any]] = None
    error: Optional[str] = None


class Data1(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    dammv2PoolAddress: Optional[str] = None
    dbcPoolAddress: Optional[str] = None
    configKey: Optional[str] = None


class DbcPoolAddressesMintGetResponse(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    success: Optional[bool] = None
    data: Optional[Data1] = None


class DbcPoolAddressesMintGetResponse1(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    errors: Optional[Dict[str, Any]] = None
    """
    Validation errors
    """


class DbcPoolAddressesMintGetResponse2(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    error: Optional[str] = Field(None, examples=['Pool addresses not found'])


class DbcPoolAddressesMintGetResponse3(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    error: Optional[str] = None


class DbcFeePostRequest(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    poolAddress: str
    """
    - Dynamic Bonding Curve pool address

    """


class DbcFeePostResponse(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    unclaimed: str
    """
    - Unclaimed creator quote fee amount

    """
    total: str
    """
    - Total trading quote fee amount divided by 2 (creator share)

    """


class DbcFeePostResponse1(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    errors: Optional[Dict[str, List[str]]] = None


class DbcFeeCreateTxPostResponse(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    transaction: str
    """
    Base64-encoded transaction ready for signing
    """


class DbcFeeCreateTxPostResponse1(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    errors: Optional[Dict[str, List[str]]] = None


class DbcFeeCreateTxPostResponse2(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    error: Optional[str] = Field(None, examples=['You are not the owner of this pool'])


class DbcFeeCreateTxPostResponse3(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    error: Optional[str] = Field(
        None, examples=['Proxy account not found for the creator']
    )
