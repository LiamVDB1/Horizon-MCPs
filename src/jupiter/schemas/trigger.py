# generated by datamodel-codegen:
#   filename:  trigger.yaml

from __future__ import annotations

from enum import Enum
from typing import Any, List, Literal, Optional

from pydantic import BaseModel, ConfigDict, Field


class CancelOrdersRequestBody(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    maker: str
    computeUnitPrice: Optional[str] = 'auto'
    """
    In microlamports, defaults to 95th percentile of priority fees

    """
    orders: Optional[List[str]] = None
    """
    Array of orders to cancel, if none is provided, the API will generate cancel instructions for all open orders belonging to the maker

    """


class CancelOrdersPostResponse(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    requestId: str
    """
    Required to make a request to `/execute`
    """
    transactions: List[str]
    """
    Array of unsigned base-64 encoded transaction(s)
    """


class CancelOrdersPostResponse1(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    error: str
    code: float
    cause: Optional[str] = None
    signature: Optional[str] = Field(
        None,
        examples=[
            '38CtpugRBobyj1JMkHj9umQyj1D8q6bs1jcMRcw7Fiyp4BXv4uh4bD4TyJs6fsqYCDDfQpeRewA7HjLA1Eprc8uR\n'
        ],
    )
    """
    Signature of the transaction, if generated
    """
    status: Optional[Literal['Failed']] = None


class Params(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    makingAmount: str
    """
    Amount of input mint to swap
    """
    takingAmount: str
    """
    Amount of output mint to receive
    """
    expiredAt: Optional[str] = None
    slippageBps: Optional[str] = 0
    """
    Amount of slippage the order can be executed with

    """
    feeBps: Optional[str] = None
    """
    Requires the `feeAccount` parameter, the amount of fees in bps that will be sent to the fee account

    """


class CreateOrdersRequestBody(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    inputMint: str
    outputMint: str
    maker: str
    payer: str
    params: Params
    computeUnitPrice: Optional[str] = 'auto'
    """
    In microlamports, defaults to 95th percentile of priority fees

    """
    feeAccount: Optional[str] = None
    """
    - A token account (via the Referral Program) that will receive the fees
    - Refer to [Referral Program Github](https://github.com/TeamRaccoons/referral/tree/main) for more information

    """
    wrapAndUnwrapSol: Optional[bool] = True
    """
    If either input or output mint is native SOL
    """


class CreateOrderPostResponse(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    requestId: str
    """
    Required to make a request to `/execute`
    """
    transaction: str
    """
    Unsigned base-64 encoded transaction
    """
    order: Optional[str] = None
    """
    Base-58 account which is the Trigger Order account
    """


class CreateOrderPostResponse1(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    error: str
    code: float
    cause: Optional[str] = None
    signature: Optional[str] = Field(
        None,
        examples=[
            '38CtpugRBobyj1JMkHj9umQyj1D8q6bs1jcMRcw7Fiyp4BXv4uh4bD4TyJs6fsqYCDDfQpeRewA7HjLA1Eprc8uR\n'
        ],
    )
    """
    Signature of the transaction, if generated
    """
    status: Optional[Literal['Failed']] = None


class CancelOrderPostRequest(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    maker: str
    order: str
    computeUnitPrice: Optional[str] = 'auto'
    """
    In microlamports, defaults to 95th percentile of priority fees

    """


class CancelOrderPostResponse(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    requestId: str
    """
    Required to make a request to `/execute`
    """
    transaction: str
    """
    Unsigned base-64 encoded transaction
    """


class CancelOrderPostResponse1(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    error: str
    code: float
    cause: Optional[str] = None
    signature: Optional[str] = Field(
        None,
        examples=[
            '38CtpugRBobyj1JMkHj9umQyj1D8q6bs1jcMRcw7Fiyp4BXv4uh4bD4TyJs6fsqYCDDfQpeRewA7HjLA1Eprc8uR\n'
        ],
    )
    """
    Signature of the transaction, if generated
    """
    status: Optional[Literal['Failed']] = None


class ExecuteRequestBody(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    requestId: str
    """
    Found in the response of `/createOrder` or `/cancelOrder`
    """
    signedTransaction: str
    """
    The signed transaction to execute
    """


class Status(Enum):
    Success = 'Success'
    Failed = 'Failed'


class ExecutePostResponse(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    code: float
    signature: str
    """
    Signature of the successful transaction
    """
    status: Status


class ExecutePostResponse1(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    error: str
    code: float
    cause: Optional[str] = None
    signature: Optional[str] = Field(
        None,
        examples=[
            '38CtpugRBobyj1JMkHj9umQyj1D8q6bs1jcMRcw7Fiyp4BXv4uh4bD4TyJs6fsqYCDDfQpeRewA7HjLA1Eprc8uR\n'
        ],
    )
    """
    Signature of the transaction, if generated
    """
    status: Optional[Literal['Failed']] = None


class IncludeFailedTx(Enum):
    true = 'true'
    false = 'false'


class OrderStatus(Enum):
    active = 'active'
    history = 'history'


class GetTriggerOrdersGetParametersQuery(BaseModel):
    user: str = Field(..., examples=['jdocuPgEAjMfihABsPgKEvYtsmMzjUHeq9LX4Hvs7f3'])
    page: Optional[str] = '1'
    includeFailedTx: Optional[IncludeFailedTx] = None
    """
    Whether to include failed transactions, expects 'true' or 'false'
    """
    orderStatus: OrderStatus
    """
    The status of the orders to return
    """
    inputMint: Optional[str] = None
    outputMint: Optional[str] = None


class Trade(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    orderKey: str
    keeper: str
    inputMint: str
    outputMint: str
    inputAmount: str
    outputAmount: str
    rawInputAmount: str
    rawOutputAmount: str
    feeMint: str
    feeAmount: str
    rawFeeAmount: str
    txId: str
    confirmedAt: str
    action: str
    productMeta: Optional[Any] = None


class Order(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    userPubkey: str
    orderKey: str
    inputMint: str
    outputMint: str
    makingAmount: str
    takingAmount: str
    remainingMakingAmount: str
    remainingTakingAmount: str
    rawMakingAmount: str
    rawTakingAmount: str
    rawRemainingMakingAmount: str
    rawRemainingTakingAmount: str
    slippageBps: str
    expiredAt: str
    createdAt: str
    updatedAt: str
    status: str
    """
    An open order with trades indicates that it has been
    partially filled

    """
    openTx: str
    closeTx: str
    programVersion: str
    trades: List[Trade]


class GetTriggerOrdersGetResponse(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    user: str
    """
    The requested user's wallet public key
    """
    orderStatus: OrderStatus
    """
    The status of the requested orders
    """
    orders: List[Order]
    totalPages: float
    """
    Total number of pages
    """
    page: float
